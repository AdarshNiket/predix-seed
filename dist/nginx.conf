# Inspired by https://github.com/cloudfoundry-community/nginx-buildpack
worker_processes 1;
daemon off;

error_log <%= ENV["APP_ROOT"] %>/nginx/logs/error.log;
events { worker_connections 1024; }

http
{
	log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
	access_log <%= ENV["APP_ROOT"] %>/nginx/logs/access.log;


	# Define the MIME types for files.
	include       mime.types;
	# Tell proxies to cache both the gzipped and regular version of a resource
	# whenever the client's Accept-Encoding capabilities header varies;
	# Avoids the issue where a non-gzip capable client (which is extremely rare today)
	# would display gibberish if their proxy gave them the gzipped version.
	gzip_vary          on;
	gzip on;
	gzip_disable "msie6";
	sendfile on;
	tcp_nopush on;
	keepalive_timeout 30;

	default_type  application/octet-stream;
    
	# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
	# to disable content-type sniffing on some browsers.
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
	# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
	# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
	add_header X-Content-Type-Options nosniff;
	X-Frame-Options

	server
	{
		listen <%= ENV["PORT"] %>;
		server_name localhost;

		location /services/asset {
			proxy_pass <%= ENV["assetUrl"] %>;
		}

		#Support /api/v2/proxy end point
		location /api/v2/proxy {
			# read the header Service-End-Point
			set $serverURL $http_Service_End_Point;
			# Sample Override the url based on type of request
			if ($http_Service_End_Point ~* "\(placeHolder\)/(.*)")
			{
				# Replace any kind of placeholder
				set $serverURL http://actual-server.ge.com/$1;
			}

			proxy_pass $serverURL;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto https;
			#Forward the request header
			proxy_set_header Authorization $http_authorization;
			<% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.resolver")) %>
				resolver <%= File.read(File.join(ENV["APP_ROOT"], "nginx/conf/.resolver")) %>;
			<% end %>
		}

		location / {
			# For HTML5 Support, Serve index.html for any other endpoint
			root <%= ENV["APP_ROOT"] %>/public/www;
			index index.html index.htm Default.htm;
		    try_files $uri $uri/ /index.html;
			
			<% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_directory_index")) %>
				autoindex on;
			<% end %>
			

			# <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_directory_index")) %>
			# 	autoindex on;
			# <% end %>
		}
	}
}
